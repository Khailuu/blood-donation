// <auto-generated />
using System;
using BloodDonation.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodDonation.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250609094754_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BloodDonation.Domain.BlogPost.BlogPost", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId2")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId2");

                    b.ToTable("BlogPosts", "dbo");
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodCompatibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromBloodType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ToBloodType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("BloodCompatibility", "dbo");
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodStored", b =>
                {
                    b.Property<Guid>("StoredId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BloodTypeId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("StoredId");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("BloodTypeId1");

                    b.ToTable("BloodStored", "dbo");
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodType", b =>
                {
                    b.Property<Guid>("BloodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("BloodTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BloodTypes", "dbo");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationHistory", b =>
                {
                    b.Property<Guid>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConfirmedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConfirmedByUserUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DonorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Completed");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DonationId");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("ConfirmedByUserUserId");

                    b.HasIndex("DonorUserId");

                    b.HasIndex("RequestId");

                    b.HasIndex("RequestId1");

                    b.HasIndex("UserId");

                    b.ToTable("DonationsHistory", "dbo");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationMatch", b =>
                {
                    b.Property<Guid>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConfirmedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DonorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DonorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("MatchedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pending");

                    b.HasKey("MatchId");

                    b.HasIndex("DonorId");

                    b.HasIndex("DonorUserId");

                    b.HasIndex("RequestId");

                    b.HasIndex("RequestId1");

                    b.ToTable("DonationMatches", "dbo");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountNeeded")
                        .HasColumnType("int");

                    b.Property<Guid>("BloodTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BloodTypeId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsEmergency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("UrgencyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId2")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RequestId");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("BloodTypeId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId2");

                    b.ToTable("DonationRequests", "dbo");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.DonorInformation", b =>
                {
                    b.Property<Guid>("DonorInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId2")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DonorInfoId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserId2");

                    b.ToTable("DonorInformation", "dbo");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BloodType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDonor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastDonationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Active");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("BloodDonation.Domain.BlogPost.BlogPost", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", null)
                        .WithMany("BlogPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId2");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodStored", b =>
                {
                    b.HasOne("BloodDonation.Domain.Bloods.BloodType", null)
                        .WithMany()
                        .HasForeignKey("BloodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Bloods.BloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeId1");

                    b.Navigation("BloodType");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationHistory", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", null)
                        .WithMany("ConfirmedDonations")
                        .HasForeignKey("ConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Users.User", "ConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ConfirmedByUserUserId");

                    b.HasOne("BloodDonation.Domain.Users.User", "Donor")
                        .WithMany()
                        .HasForeignKey("DonorUserId");

                    b.HasOne("BloodDonation.Domain.Donations.DonationRequest", null)
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Donations.DonationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId1");

                    b.HasOne("BloodDonation.Domain.Users.User", null)
                        .WithMany("DonationHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfirmedByUser");

                    b.Navigation("Donor");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationMatch", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", null)
                        .WithMany("DonationMatches")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Users.User", "Donor")
                        .WithMany()
                        .HasForeignKey("DonorUserId");

                    b.HasOne("BloodDonation.Domain.Donations.DonationRequest", null)
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Donations.DonationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId1");

                    b.Navigation("Donor");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationRequest", b =>
                {
                    b.HasOne("BloodDonation.Domain.Bloods.BloodType", null)
                        .WithMany()
                        .HasForeignKey("BloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Bloods.BloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeId1");

                    b.HasOne("BloodDonation.Domain.Users.User", null)
                        .WithMany("DonationRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId2");

                    b.Navigation("BloodType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.DonorInformation", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", null)
                        .WithOne("DonorInformation")
                        .HasForeignKey("BloodDonation.Domain.Users.DonorInformation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId2");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.User", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("ConfirmedDonations");

                    b.Navigation("DonationHistories");

                    b.Navigation("DonationMatches");

                    b.Navigation("DonationRequests");

                    b.Navigation("DonorInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
