// <auto-generated />
using System;
using BloodDonation.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BloodDonation.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BloodDonation.Domain.BlogPost.BlogPost", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogPosts", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodCompatibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FromBloodTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToBloodTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromBloodTypeId");

                    b.HasIndex("ToBloodTypeId");

                    b.ToTable("BloodCompatibility", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodStored", b =>
                {
                    b.Property<Guid>("StoredId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BloodTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("StoredId");

                    b.HasIndex("BloodTypeId");

                    b.ToTable("BloodStored", "public");

                    b.HasData(
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000001"),
                            BloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1"),
                            LastUpdated = new DateTime(2025, 6, 23, 4, 29, 49, 88, DateTimeKind.Utc).AddTicks(5060),
                            Quantity = 0
                        },
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000002"),
                            BloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            LastUpdated = new DateTime(2025, 6, 23, 4, 29, 49, 88, DateTimeKind.Utc).AddTicks(5060),
                            Quantity = 0
                        },
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000003"),
                            BloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7"),
                            LastUpdated = new DateTime(2025, 6, 23, 4, 29, 49, 88, DateTimeKind.Utc).AddTicks(5060),
                            Quantity = 0
                        },
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000004"),
                            BloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            LastUpdated = new DateTime(2025, 6, 23, 4, 29, 49, 88, DateTimeKind.Utc).AddTicks(5060),
                            Quantity = 0
                        },
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000005"),
                            BloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f"),
                            LastUpdated = new DateTime(2025, 6, 23, 4, 29, 49, 88, DateTimeKind.Utc).AddTicks(5060),
                            Quantity = 0
                        },
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000006"),
                            BloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1"),
                            LastUpdated = new DateTime(2025, 6, 23, 4, 29, 49, 88, DateTimeKind.Utc).AddTicks(5070),
                            Quantity = 0
                        },
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000007"),
                            BloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            LastUpdated = new DateTime(2025, 6, 23, 4, 29, 49, 88, DateTimeKind.Utc).AddTicks(5070),
                            Quantity = 0
                        },
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000008"),
                            BloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            LastUpdated = new DateTime(2025, 6, 23, 4, 29, 49, 88, DateTimeKind.Utc).AddTicks(5070),
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodType", b =>
                {
                    b.Property<Guid>("BloodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("BloodTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BloodTypes", "public");

                    b.HasData(
                        new
                        {
                            BloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1"),
                            Description = "A positive blood type",
                            Name = "A+"
                        },
                        new
                        {
                            BloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            Description = "A negative blood type",
                            Name = "A-"
                        },
                        new
                        {
                            BloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7"),
                            Description = "B positive blood type",
                            Name = "B+"
                        },
                        new
                        {
                            BloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            Description = "B negative blood type",
                            Name = "B-"
                        },
                        new
                        {
                            BloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f"),
                            Description = "AB positive blood type (universal plasma donor)",
                            Name = "AB+"
                        },
                        new
                        {
                            BloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1"),
                            Description = "AB negative blood type",
                            Name = "AB-"
                        },
                        new
                        {
                            BloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            Description = "O positive blood type (most common)",
                            Name = "O+"
                        },
                        new
                        {
                            BloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            Description = "O negative blood type (universal donor)",
                            Name = "O-"
                        });
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationHistory", b =>
                {
                    b.Property<Guid>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConfirmedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Completed");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("DonationId");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("DonationsHistory", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationMatch", b =>
                {
                    b.Property<Guid>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ConfirmedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DonorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("MatchedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.HasKey("MatchId");

                    b.HasIndex("DonorId");

                    b.HasIndex("RequestId");

                    b.ToTable("DonationMatches", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AmountBlood")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Deadline")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsEmergency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RequestId");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("DonationRequests", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.QuestionForm.HealthAnswer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("AnswerId");

                    b.HasIndex("FormId");

                    b.HasIndex("QuestionId");

                    b.ToTable("HealthAnswers", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.QuestionForm.HealthForm", b =>
                {
                    b.Property<Guid>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovedByStaffName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("FormId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("UserId");

                    b.ToTable("HealthForms", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.QuestionForm.HealthQuestion", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionId");

                    b.ToTable("HealthQuestions", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.DonorInformation", b =>
                {
                    b.Property<Guid>("DonorInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MedicalStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("DonorInfoId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DonorInformation", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("BloodType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsDonor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastDonationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Active");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.BlogPost.BlogPost", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithMany("BlogPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodCompatibility", b =>
                {
                    b.HasOne("BloodDonation.Domain.Bloods.BloodType", "FromBloodType")
                        .WithMany("CompatibleFrom")
                        .HasForeignKey("FromBloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Bloods.BloodType", "ToBloodType")
                        .WithMany("CompatibleTo")
                        .HasForeignKey("ToBloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromBloodType");

                    b.Navigation("ToBloodType");
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodStored", b =>
                {
                    b.HasOne("BloodDonation.Domain.Bloods.BloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BloodType");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationHistory", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", "ConfirmedByUser")
                        .WithMany("ConfirmedDonations")
                        .HasForeignKey("ConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Donations.DonationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Users.User", "Donor")
                        .WithMany("DonationHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfirmedByUser");

                    b.Navigation("Donor");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationMatch", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", "Donor")
                        .WithMany("DonationMatches")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Donations.DonationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationRequest", b =>
                {
                    b.HasOne("BloodDonation.Domain.Bloods.BloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithMany("DonationRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BloodType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.QuestionForm.HealthAnswer", b =>
                {
                    b.HasOne("BloodDonation.Domain.QuestionForm.HealthForm", "Form")
                        .WithMany("Answers")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.QuestionForm.HealthQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BloodDonation.Domain.QuestionForm.HealthForm", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", "ApprovedByStaff")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithMany("HealthForms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByStaff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.DonorInformation", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithOne("DonorInformation")
                        .HasForeignKey("BloodDonation.Domain.Users.DonorInformation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.RefreshToken", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodType", b =>
                {
                    b.Navigation("CompatibleFrom");

                    b.Navigation("CompatibleTo");
                });

            modelBuilder.Entity("BloodDonation.Domain.QuestionForm.HealthForm", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("BloodDonation.Domain.QuestionForm.HealthQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.User", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("ConfirmedDonations");

                    b.Navigation("DonationHistories");

                    b.Navigation("DonationMatches");

                    b.Navigation("DonationRequests");

                    b.Navigation("DonorInformation");

                    b.Navigation("HealthForms");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
