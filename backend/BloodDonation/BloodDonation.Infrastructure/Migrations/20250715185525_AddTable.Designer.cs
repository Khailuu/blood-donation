// <auto-generated />
using System;
using BloodDonation.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BloodDonation.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250715185525_AddTable")]
    partial class AddTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BloodDonation.Domain.BlogPost.BlogPost", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogPosts", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.BlogPost.BlogPostComment", b =>
                {
                    b.Property<Guid>("BlogPostCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CommentedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("BlogPostCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogPostComments", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.BlogPost.BlogPostLike", b =>
                {
                    b.Property<Guid>("BlogPostLikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("BlogPostLikeId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId", "PostId")
                        .IsUnique();

                    b.ToTable("BlogPostLikes", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodCompatibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FromBloodTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToBloodTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromBloodTypeId");

                    b.HasIndex("ToBloodTypeId");

                    b.ToTable("BloodCompatibility", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c71a088b-9b57-40f7-a34e-63566d6ada85"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79")
                        },
                        new
                        {
                            Id = new Guid("8ec309fb-a347-4f18-9d48-4903b0e6f9c9"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c")
                        },
                        new
                        {
                            Id = new Guid("5373f9e4-6606-4f15-8fc9-3a4a0c2280a3"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845")
                        },
                        new
                        {
                            Id = new Guid("b02663d0-e4f1-46bf-aa2b-fe329ea71d0f"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1")
                        },
                        new
                        {
                            Id = new Guid("67d126f4-cfe0-4c18-aeee-529e028b8f41"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7")
                        },
                        new
                        {
                            Id = new Guid("17b9a9c7-78c0-43f4-b9f1-a2a67b4d4c26"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7")
                        },
                        new
                        {
                            Id = new Guid("3819ad6e-075d-450a-a1f1-e5ef8b20aec3"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1")
                        },
                        new
                        {
                            Id = new Guid("faa43d63-188d-464f-ade6-ce759bdd676a"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("97e535d1-9f4d-4e22-8d85-7e5f0396673d"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            ToBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c")
                        },
                        new
                        {
                            Id = new Guid("bbc4d3f9-b20c-4cc8-addb-f0668ec766fb"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            ToBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1")
                        },
                        new
                        {
                            Id = new Guid("c27420d3-6fcf-445b-be7c-dd38fdae4020"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            ToBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7")
                        },
                        new
                        {
                            Id = new Guid("2d18eca2-0ba8-4651-87fc-ac87b6d26464"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("9f0c9655-d172-49fc-baf0-cc507149a0e7"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            ToBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845")
                        },
                        new
                        {
                            Id = new Guid("0b3d4469-aedc-45fb-9cfd-35e3d3c733c2"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            ToBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1")
                        },
                        new
                        {
                            Id = new Guid("f9edd806-8e1d-4f14-a73a-9a3ba39b6322"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            ToBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1")
                        },
                        new
                        {
                            Id = new Guid("89909a56-904a-4fde-8404-131a436159d3"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("b93ada2e-64f9-49df-9fe5-1953608584ff"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1"),
                            ToBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1")
                        },
                        new
                        {
                            Id = new Guid("b06d5f9e-9176-4f31-a67c-85383604e518"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("5236eaae-ba9e-4742-8102-35984e4f0a26"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            ToBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7")
                        },
                        new
                        {
                            Id = new Guid("05175aeb-2caf-4834-a3f9-682379f0b4bf"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            ToBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7")
                        },
                        new
                        {
                            Id = new Guid("12535230-3e4c-4171-a940-0b5d95d3a2b3"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            ToBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1")
                        },
                        new
                        {
                            Id = new Guid("a9b513da-8a35-4444-9d1c-07fc7f1631c5"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("dcde7712-792f-4458-b5a3-202f0c3466bd"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7"),
                            ToBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7")
                        },
                        new
                        {
                            Id = new Guid("e4b9e4fb-a907-4b8a-b785-8f9ec06ae251"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("6ac72b3c-b4e9-447a-9939-03bdff080b20"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1"),
                            ToBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1")
                        },
                        new
                        {
                            Id = new Guid("54345af2-97c7-4315-8b21-ca5941edf887"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("7f58aa85-42ff-4af1-aad6-0af66d481353"),
                            ComponentType = "RBC",
                            FromBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("05b4303f-5cc5-4141-8e67-eff205a04dcb"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79")
                        },
                        new
                        {
                            Id = new Guid("33e6f85d-a476-4ea3-958e-5d42e955cfff"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c")
                        },
                        new
                        {
                            Id = new Guid("e9287c1d-22cb-430b-bcfc-ddd9d15458d0"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845")
                        },
                        new
                        {
                            Id = new Guid("7c1b2d8e-133d-4b9e-8b80-c77ed26c5b89"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1")
                        },
                        new
                        {
                            Id = new Guid("5091c9d7-fcc4-4f8b-9b62-372cc0e3a979"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7")
                        },
                        new
                        {
                            Id = new Guid("c6910ce0-0128-49c6-8837-a68c6d69a20b"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7")
                        },
                        new
                        {
                            Id = new Guid("5e7e29a3-770c-4176-a7bc-6e053db76f9b"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1")
                        },
                        new
                        {
                            Id = new Guid("ac154c81-0e99-4f3b-bf4c-eb76e0e328a6"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("028f1bb2-843b-4174-b7eb-baaac86612a2"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            ToBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c")
                        },
                        new
                        {
                            Id = new Guid("b961ee9d-b768-4bda-a355-aee6bb878fa8"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            ToBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1")
                        },
                        new
                        {
                            Id = new Guid("6a0b2ce7-41b2-44d6-9c3e-09524658ab1c"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            ToBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7")
                        },
                        new
                        {
                            Id = new Guid("197101e4-2d86-48cf-9bcb-23fd386d33ad"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("da8b71b0-f67e-476e-96b0-312282cd76f5"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            ToBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845")
                        },
                        new
                        {
                            Id = new Guid("218fe1c9-6bb2-4eb0-94f8-aa09856c52b3"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            ToBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1")
                        },
                        new
                        {
                            Id = new Guid("f1cceaec-4891-4d13-bb0d-2aea708717d2"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            ToBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1")
                        },
                        new
                        {
                            Id = new Guid("79796b93-2ff8-4013-80ab-d8da9cb2440a"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("6a06c628-b312-4aea-8d3b-2653452ce927"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1"),
                            ToBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1")
                        },
                        new
                        {
                            Id = new Guid("9616bdeb-e645-4236-a1e2-ae37eca0da77"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("2279f09b-9c8a-45ba-b85b-e76473b5b3b4"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            ToBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7")
                        },
                        new
                        {
                            Id = new Guid("d0223813-fa5e-4971-a666-fc7cfaec8964"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            ToBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7")
                        },
                        new
                        {
                            Id = new Guid("d6fc45a1-249d-4f7d-b19a-eaa6d8ce5c6f"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            ToBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1")
                        },
                        new
                        {
                            Id = new Guid("0b6364cb-5a84-46a3-97e6-a9d9b640d28d"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("b6d9643e-816e-4750-bd05-75790f2931b7"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7"),
                            ToBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7")
                        },
                        new
                        {
                            Id = new Guid("ea78c1f0-6eaf-42a4-a0f0-9ce5772da323"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("fbb6081a-939c-49ba-86b0-9b930e6b7bf9"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1"),
                            ToBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1")
                        },
                        new
                        {
                            Id = new Guid("0c75d8b3-5671-4101-993e-f6bf25ac2ad3"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("8f4b70ab-6f87-4470-a36a-e9b1f1819b2b"),
                            ComponentType = "Whole",
                            FromBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("eaff94a7-9901-4ffc-84d8-fab26b24d09a"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f"),
                            ToBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1")
                        },
                        new
                        {
                            Id = new Guid("77ff1bb4-6348-4e1d-8271-e521117a471e"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f"),
                            ToBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845")
                        },
                        new
                        {
                            Id = new Guid("58385a0c-0f36-45c2-9583-31dd2962cfca"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f"),
                            ToBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7")
                        },
                        new
                        {
                            Id = new Guid("35f6cda4-eed7-4868-b1d5-66db3dcdecea"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f"),
                            ToBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7")
                        },
                        new
                        {
                            Id = new Guid("b378bfb8-7991-49b0-aa55-42950b92161f"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("b4a87c72-3d38-4dbc-b3d8-9b8993979268"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f"),
                            ToBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1")
                        },
                        new
                        {
                            Id = new Guid("0ccbaa02-e491-4692-8aec-b7652bca3eb9"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f"),
                            ToBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c")
                        },
                        new
                        {
                            Id = new Guid("3e98b71f-78a2-4ad8-8689-d414826b745d"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f"),
                            ToBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79")
                        },
                        new
                        {
                            Id = new Guid("584dbfb3-6ae5-4f96-ae99-f2697bffdfd7"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1"),
                            ToBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845")
                        },
                        new
                        {
                            Id = new Guid("09f7ab01-e442-4640-8661-466c425133f4"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1"),
                            ToBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7")
                        },
                        new
                        {
                            Id = new Guid("8cf9fb33-6202-4899-b1aa-3681af21a84a"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1"),
                            ToBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1")
                        },
                        new
                        {
                            Id = new Guid("81b2a2d0-0f3c-4738-b813-02d07230849f"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1"),
                            ToBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79")
                        },
                        new
                        {
                            Id = new Guid("621fa3be-b930-4941-bb63-98f1c3ea90f4"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1"),
                            ToBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1")
                        },
                        new
                        {
                            Id = new Guid("eeafb775-27fe-425b-b897-e92cfce6603b"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1"),
                            ToBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845")
                        },
                        new
                        {
                            Id = new Guid("6ad465a4-1559-4365-b160-9724861fc0aa"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1"),
                            ToBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c")
                        },
                        new
                        {
                            Id = new Guid("25b461e8-6e20-4b80-802f-8b14a507b738"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1"),
                            ToBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79")
                        },
                        new
                        {
                            Id = new Guid("185e18d1-6225-4eca-aa0d-c34103f54da2"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            ToBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845")
                        },
                        new
                        {
                            Id = new Guid("05dddacf-34bd-4544-90d4-0c796d57560f"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            ToBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79")
                        },
                        new
                        {
                            Id = new Guid("ed0df265-f33f-4301-baa0-9214d65246ee"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7"),
                            ToBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7")
                        },
                        new
                        {
                            Id = new Guid("048f12ee-3836-487b-9019-278e4c02445b"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7"),
                            ToBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7")
                        },
                        new
                        {
                            Id = new Guid("1441faf6-383e-46f6-9e58-665b2917c99a"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7"),
                            ToBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c")
                        },
                        new
                        {
                            Id = new Guid("4d28fece-baeb-4d39-a7d1-c6f2cda99b70"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7"),
                            ToBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79")
                        },
                        new
                        {
                            Id = new Guid("a3291eab-5e7c-4587-9e60-4b156734103a"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            ToBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7")
                        },
                        new
                        {
                            Id = new Guid("713d23a8-df8a-44f3-ba92-4eb36aadfd97"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            ToBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79")
                        },
                        new
                        {
                            Id = new Guid("d51a1655-2965-4c8e-bb6c-36d522e56475"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            ToBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c")
                        },
                        new
                        {
                            Id = new Guid("8e2dd8c0-1b98-445f-9a69-db044e0ff470"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            ToBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79")
                        },
                        new
                        {
                            Id = new Guid("4a426902-b3f4-42f0-84c5-d5a8fcf736c3"),
                            ComponentType = "Plasma",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79")
                        },
                        new
                        {
                            Id = new Guid("884a77e8-1e8f-4add-a471-d73c7e49b808"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79")
                        },
                        new
                        {
                            Id = new Guid("f79408ae-4887-47b3-8d74-5f2e5dcbc5e1"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c")
                        },
                        new
                        {
                            Id = new Guid("7b906ecb-ee26-484f-beac-0ac109fa590b"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845")
                        },
                        new
                        {
                            Id = new Guid("07411d4a-3c4d-492c-a1b3-f269528d4f2a"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1")
                        },
                        new
                        {
                            Id = new Guid("9ba974a9-4a18-4495-9de2-ad1a3e84cdc8"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7")
                        },
                        new
                        {
                            Id = new Guid("ca15e2ad-7443-4b50-af49-eade7b6d28a4"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7")
                        },
                        new
                        {
                            Id = new Guid("ff860804-8449-49fa-9b5f-bb4d142dddf4"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1")
                        },
                        new
                        {
                            Id = new Guid("7c8d78c4-a6f9-4146-9140-5aa42e1cf00c"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("92566af7-04a9-49be-a5b0-207e96f77fed"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            ToBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c")
                        },
                        new
                        {
                            Id = new Guid("bbeea3ea-3774-427b-abd6-91710829c44b"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            ToBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1")
                        },
                        new
                        {
                            Id = new Guid("8af8c3cb-7061-4365-af57-ec6be5b09c1f"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            ToBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7")
                        },
                        new
                        {
                            Id = new Guid("b7aa1e07-219c-4014-b905-066aef675ebf"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("86ca625d-0f60-4f03-8a84-a625d0de445d"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            ToBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845")
                        },
                        new
                        {
                            Id = new Guid("c672b42a-6734-4ea9-951d-f1e1f958dfc2"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            ToBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1")
                        },
                        new
                        {
                            Id = new Guid("e4ff82e0-c35c-4fe2-9ae1-6f2d052e02f5"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            ToBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1")
                        },
                        new
                        {
                            Id = new Guid("f134993f-8064-4114-b42a-1af964db77b4"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("ebf85fdb-78e4-415e-a1d6-7e1e09641185"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1"),
                            ToBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1")
                        },
                        new
                        {
                            Id = new Guid("d93bb1d8-4652-48d3-baaf-9e725332f969"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("f7c5e27d-6da2-483c-ab78-474ee2ef7217"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            ToBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7")
                        },
                        new
                        {
                            Id = new Guid("ecdc823c-2bd3-4024-a72c-bc6915c7a484"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            ToBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7")
                        },
                        new
                        {
                            Id = new Guid("43d2aa71-597a-4dc7-b716-a30a4debcc93"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            ToBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1")
                        },
                        new
                        {
                            Id = new Guid("507db8ca-edbc-4b39-9ea2-9a021a3bf1a9"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("531ae509-7085-42d8-bf80-a239b57b4f56"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7"),
                            ToBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7")
                        },
                        new
                        {
                            Id = new Guid("525bc9df-bdf3-42ec-ae42-71b46da13a3b"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("53054f78-f880-47e7-aad1-e9df537885e8"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1"),
                            ToBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1")
                        },
                        new
                        {
                            Id = new Guid("bdc3bc28-7b38-4040-9d3d-940d97298120"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        },
                        new
                        {
                            Id = new Guid("80192b3f-0df8-4adb-99a9-714b07a69a1d"),
                            ComponentType = "Platelet",
                            FromBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f"),
                            ToBloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f")
                        });
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodStored", b =>
                {
                    b.Property<Guid>("StoredId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BloodTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("StoredId");

                    b.HasIndex("BloodTypeId");

                    b.ToTable("BloodStored", "public");

                    b.HasData(
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000001"),
                            BloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1"),
                            LastUpdated = new DateTime(2025, 7, 15, 18, 55, 25, 285, DateTimeKind.Utc).AddTicks(5820),
                            Quantity = 0
                        },
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000002"),
                            BloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            LastUpdated = new DateTime(2025, 7, 15, 18, 55, 25, 285, DateTimeKind.Utc).AddTicks(5830),
                            Quantity = 0
                        },
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000003"),
                            BloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7"),
                            LastUpdated = new DateTime(2025, 7, 15, 18, 55, 25, 285, DateTimeKind.Utc).AddTicks(5830),
                            Quantity = 0
                        },
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000004"),
                            BloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            LastUpdated = new DateTime(2025, 7, 15, 18, 55, 25, 285, DateTimeKind.Utc).AddTicks(5830),
                            Quantity = 0
                        },
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000005"),
                            BloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f"),
                            LastUpdated = new DateTime(2025, 7, 15, 18, 55, 25, 285, DateTimeKind.Utc).AddTicks(5830),
                            Quantity = 0
                        },
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000006"),
                            BloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1"),
                            LastUpdated = new DateTime(2025, 7, 15, 18, 55, 25, 285, DateTimeKind.Utc).AddTicks(5830),
                            Quantity = 0
                        },
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000007"),
                            BloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            LastUpdated = new DateTime(2025, 7, 15, 18, 55, 25, 285, DateTimeKind.Utc).AddTicks(5830),
                            Quantity = 0
                        },
                        new
                        {
                            StoredId = new Guid("10000000-0000-0000-0000-000000000008"),
                            BloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            LastUpdated = new DateTime(2025, 7, 15, 18, 55, 25, 285, DateTimeKind.Utc).AddTicks(5830),
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodType", b =>
                {
                    b.Property<Guid>("BloodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("BloodTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BloodTypes", "public");

                    b.HasData(
                        new
                        {
                            BloodTypeId = new Guid("2b0f96e4-9052-4d68-a937-9adfc9d231d1"),
                            Description = "A positive blood type",
                            Name = "A+"
                        },
                        new
                        {
                            BloodTypeId = new Guid("0f5f77fb-2bd4-4aeb-9bd4-bb56745c8845"),
                            Description = "A negative blood type",
                            Name = "A-"
                        },
                        new
                        {
                            BloodTypeId = new Guid("91baf3d9-759f-4bb8-82a4-3d9d645d91b7"),
                            Description = "B positive blood type",
                            Name = "B+"
                        },
                        new
                        {
                            BloodTypeId = new Guid("82f33bfb-7fa4-432e-8735-1c0e5c2f99f7"),
                            Description = "B negative blood type",
                            Name = "B-"
                        },
                        new
                        {
                            BloodTypeId = new Guid("edc95a1c-0c3f-4a61-a104-f949109e7c0f"),
                            Description = "AB positive blood type (universal plasma donor)",
                            Name = "AB+"
                        },
                        new
                        {
                            BloodTypeId = new Guid("1479d6c3-0c85-4cb7-a2c4-894c35e21eb1"),
                            Description = "AB negative blood type",
                            Name = "AB-"
                        },
                        new
                        {
                            BloodTypeId = new Guid("b160fa12-dfa5-44c7-a179-6ef0f3c7c28c"),
                            Description = "O positive blood type (most common)",
                            Name = "O+"
                        },
                        new
                        {
                            BloodTypeId = new Guid("62ef305e-755a-4651-9ed7-6fc4b4061e79"),
                            Description = "O negative blood type (universal donor)",
                            Name = "O-"
                        });
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationHistory", b =>
                {
                    b.Property<Guid>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConfirmedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Completed");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("DonationId");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("DonationsHistory", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationMatch", b =>
                {
                    b.Property<Guid>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ConfirmedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DonorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("MatchedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.HasKey("MatchId");

                    b.HasIndex("DonorId");

                    b.HasIndex("RequestId");

                    b.ToTable("DonationMatches", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AmountBlood")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Deadline")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() + interval '7 days'");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsEmergency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RequestId");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("DonationRequests", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.EmailTemplates.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MainContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "\n                    <!DOCTYPE html>\n                    <html>\n                    <head>\n                        <meta charset=\"UTF-8\" />\n                        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n                        <title>Email Template</title>\n                        <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\" />\n                    </head>\n                    <body class=\"bg-gray-100\">\n                        <div class=\"max-w-xl mx-auto my-6 bg-white rounded-lg shadow-md\">\n                            <div class=\"bg-blue-500 text-white text-center py-4 rounded-t-lg\">\n                                <h1 class=\"text-xl font-bold\">{{header}}</h1>\n                            </div>\n                            <div class=\"p-6 text-center\">\n                                <p class=\"text-gray-800 text-base\">Hello <b>{{username}}</b>,</p>\n                                <p class=\"text-gray-700 mt-4\">{{content}}</p>\n                                <div class=\"mt-6\">\n                                    <a href=\"{{button_link}}\" class=\"inline-block bg-blue-600 text-white font-bold py-2 px-4 rounded hover:bg-blue-700 transition duration-300\">\n                                        {{button_text}}\n                                    </a>\n                                </div>\n                            </div>\n                            <div class=\"bg-gray-100 text-center py-3 rounded-b-lg\">\n                                <p class=\"text-gray-500 text-xs\">\n                                    © {{year}} Blood Donation. All rights reserved.\n                                </p>\n                                <p>\n                                    <a href=\"{{website_link}}\" class=\"text-blue-500 text-xs\">Visit our website</a>\n                                </p>\n                            </div>\n                        </div>\n                    </body>\n                    </html>",
                            Header = "Verify Email",
                            MainContent = "Main 1"
                        },
                        new
                        {
                            Id = 2,
                            Content = "\n                    <!DOCTYPE html>\n                        <html>\n                            <head>\n                                <meta charset=\"UTF-8\" />\n                                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n                                <title>Email Template</title>\n                                <link\n                                href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\"\n                                rel=\"stylesheet\"\n                                />\n                            </head>\n                            <body class=\"bg-gray-100\">\n                                <div class=\"max-w-xl mx-auto my-6 bg-white rounded-lg shadow-md\">\n                                <div class=\"bg-blue-500 text-white text-center py-4 rounded-t-lg\">\n                                    <h1 class=\"text-xl font-bold\">{{header}}</h1>\n                                </div>\n                                <div class=\"p-6 text-center\">\n                                    <p class=\"text-gray-800 text-base\">Hello <b>{{username}}</b>,</p>\n                                    <p class=\"text-gray-700 mt-4\">{{content}}</p>\n                                </div>\n                                <div class=\"bg-gray-100 text-center py-3 rounded-b-lg\">\n                                    <p class=\"text-gray-500 text-xs\">\n                                        © {{year}} Blood Donation. All rights reserved.\n                                    </p>\n                                    <p>\n                                        <a href=\"{{website_link}}\" class=\"text-blue-500 text-xs\"\n                                            >Visit our website</a\n                                        >\n                                    </p>\n                                </div>\n                            </div>\n                        </body>\n                    </html>",
                            Header = "Template 2",
                            MainContent = "Main 2"
                        });
                });

            modelBuilder.Entity("BloodDonation.Domain.Q_A.QaAnswer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("QuesttionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuesttionId");

                    b.HasIndex("UserId");

                    b.ToTable("QaAnswers", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.Q_A.QaQuestions", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("QaQuestions", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.QuestionForm.HealthAnswer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("AnswerId");

                    b.HasIndex("FormId");

                    b.HasIndex("QuestionId");

                    b.ToTable("HealthAnswers", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.QuestionForm.HealthForm", b =>
                {
                    b.Property<Guid>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovedByStaffName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("FormId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("UserId");

                    b.ToTable("HealthForms", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.QuestionForm.HealthQuestion", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionId");

                    b.ToTable("HealthQuestions", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.DonorInformation", b =>
                {
                    b.Property<Guid>("DonorInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MedicalStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("DonorInfoId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DonorInformation", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.Patient", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PatientBloodType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatientEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatientPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Patients", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("BloodTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("IsDonor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastDonationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Active");

                    b.HasKey("UserId");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", "public");
                });

            modelBuilder.Entity("BloodDonation.Domain.BlogPost.BlogPost", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithMany("BlogPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.BlogPost.BlogPostComment", b =>
                {
                    b.HasOne("BloodDonation.Domain.BlogPost.BlogPost", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithMany("BlogPostComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.BlogPost.BlogPostLike", b =>
                {
                    b.HasOne("BloodDonation.Domain.BlogPost.BlogPost", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithMany("BlogPostLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodCompatibility", b =>
                {
                    b.HasOne("BloodDonation.Domain.Bloods.BloodType", "FromBloodType")
                        .WithMany("CompatibleFrom")
                        .HasForeignKey("FromBloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Bloods.BloodType", "ToBloodType")
                        .WithMany("CompatibleTo")
                        .HasForeignKey("ToBloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromBloodType");

                    b.Navigation("ToBloodType");
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodStored", b =>
                {
                    b.HasOne("BloodDonation.Domain.Bloods.BloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BloodType");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationHistory", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", "ConfirmedByUser")
                        .WithMany("ConfirmedDonations")
                        .HasForeignKey("ConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Donations.DonationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Users.User", "Donor")
                        .WithMany("DonationHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfirmedByUser");

                    b.Navigation("Donor");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationMatch", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", "Donor")
                        .WithMany("DonationMatches")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Donations.DonationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("BloodDonation.Domain.Donations.DonationRequest", b =>
                {
                    b.HasOne("BloodDonation.Domain.Bloods.BloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithMany("DonationRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BloodType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Q_A.QaAnswer", b =>
                {
                    b.HasOne("BloodDonation.Domain.Q_A.QaQuestions", "Question")
                        .WithMany("Comments")
                        .HasForeignKey("QuesttionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithMany("QaAnswer")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Q_A.QaQuestions", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithMany("QaQuestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.QuestionForm.HealthAnswer", b =>
                {
                    b.HasOne("BloodDonation.Domain.QuestionForm.HealthForm", "Form")
                        .WithMany("Answers")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonation.Domain.QuestionForm.HealthQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BloodDonation.Domain.QuestionForm.HealthForm", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", "ApprovedByStaff")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithMany("HealthForms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByStaff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.DonorInformation", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithOne("DonorInformation")
                        .HasForeignKey("BloodDonation.Domain.Users.DonorInformation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.Patient", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("BloodDonation.Domain.Users.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.RefreshToken", b =>
                {
                    b.HasOne("BloodDonation.Domain.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.User", b =>
                {
                    b.HasOne("BloodDonation.Domain.Bloods.BloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeId");

                    b.Navigation("BloodType");
                });

            modelBuilder.Entity("BloodDonation.Domain.BlogPost.BlogPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("BloodDonation.Domain.Bloods.BloodType", b =>
                {
                    b.Navigation("CompatibleFrom");

                    b.Navigation("CompatibleTo");
                });

            modelBuilder.Entity("BloodDonation.Domain.Q_A.QaQuestions", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BloodDonation.Domain.QuestionForm.HealthForm", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("BloodDonation.Domain.QuestionForm.HealthQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("BloodDonation.Domain.Users.User", b =>
                {
                    b.Navigation("BlogPostComments");

                    b.Navigation("BlogPostLikes");

                    b.Navigation("BlogPosts");

                    b.Navigation("ConfirmedDonations");

                    b.Navigation("DonationHistories");

                    b.Navigation("DonationMatches");

                    b.Navigation("DonationRequests");

                    b.Navigation("DonorInformation");

                    b.Navigation("HealthForms");

                    b.Navigation("Patient");

                    b.Navigation("QaAnswer");

                    b.Navigation("QaQuestions");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
